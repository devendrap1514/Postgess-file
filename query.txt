In a SQL query, the typical order of execution is as follows:

FROM clause: Tables are selected.

WHERE clause: Filtering is applied to the selected rows.

GROUP BY clause: Rows are grouped based on specified columns.

HAVING clause: Filtering is applied to the grouped rows.

SELECT clause: Columns to be displayed are chosen.

DISTINCT: Duplicate rows are eliminated.

ORDER BY clause: Results are sorted based on specified columns.

LIMIT or OFFSET: Rows are limited or skipped, if required.

Keep in mind that the specific execution order can vary depending on the database system and optimizations applied, but this is a general guideline



# create database
CREATE DATABASE db_name;


# ---------------------SELECT-----------------
# "https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-select/"
# PostgreSQL evaluates the FROM clause before the SELECT clause in the SELECT statement:
# FROM -> SELECT

SELECT
   first_name,
   last_name,
   email
FROM 
   customer;

SELECT * FROM customer;

# concatenation operator ||

SELECT 
   first_name || ' ' || last_name,
   email
FROM 
   customer;
   
SELECT 5 * 3;





# ---------------------COLUMN ALIAS-----------------
# "https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-column-alias/"

# The AS keyword is optional.

SELECT
    first_name || ' ' || last_name AS full_name
FROM
    customer;

# Column aliases that contain spaces

# If a column alias contains one or more spaces, you need to surround it with double quotes like this:

# column_name AS "column alias"

SELECT
    first_name || ' ' || last_name "full name"
FROM
    customer;





# ---------------------ORDER BY-----------------

# "https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-order-by/"

# PostgreSQL evaluates the clauses in the SELECT statment in the following order: FROM, SELECT, and ORDER BY:

#  FROM -> SELECT -> ORDER BY

# ORDER BY uses ASC by default.
# ---> ASC
SELECT
	first_name
FROM
	customer
ORDER BY
	first_name ASC;

# ---> DESC
SELECT
	first_name
FROM
	customer
ORDER BY
	first_name DESC;


# ---> Multiple Column

SELECT
	first_name, 
	last_name
FROM
	customer
ORDER BY
	first_name ASC
	last_name DESC;

# ---> sort rows by expression

# Because the ORDER BY clause is evaluated after the SELECT clause, the column alias len is available and can be used in the ORDER BY clause.

SELECT 
	first_name,
	LENGTH(first_name) len
FROM
	customer
ORDER BY 
	len DESC;    #  len is a column name




# ORDER BY clause and NULL


SELECT
	first_name
FROM
	customer
ORDER BY
	first_name ASC;

# OUTPUT: 1, 2, 3, null



SELECT
	first_name
FROM
	customer
ORDER BY
	first_name DISC;

OUTPUT: null, 3, 2, 1



# ---> NULLS FIRST or NULLS LAST fetch data in asc order by default

SELECT
	first_name
FROM
	customer
ORDER BY
	first_name NULLS LAST;

# OUTPUT: null, 1, 2, 3...



SELECT
	first_name
FROM
	customer
ORDER BY
	first_name NULLS FIRST;

OUTPUT: null, 1, 2, 3...



# ---> As you can see clearly from the output, the ORDER BY clause with the DESC option uses the NULLS FIRST by default.

# To reverse the order, you can use the NULLS LAST option:


SELECT
	first_name
FROM
	customer
ORDER BY
	first_name DESC NULLS LAST;

# OUTPUT: 3, 2, 1, null





# ---------------------SELECT DISTINCT-----------------

# "https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-select-distinct/"

# The DISTINCT clause is used in the SELECT statement to remove duplicate rows from a result set.



# ---> DISTINCT one column example
# the values in the column1 column are used to evaluate the duplicate.

SELECT
   DISTINCT column1
FROM
   table_name;



# ---> DISTINCT multiple column example
# If you specify multiple columns, the DISTINCT clause will evaluate the duplicate based on the combination of values of these columns.

SELECT
   DISTINCT column1, column2
FROM
   table_name;



# ---> DISTINCT ON example
# alias compulsory
# The following statement sorts the result set by the  column1 and  column2, and then for each group of duplicates, it keeps the first row in the returned result set.

SELECT
   DISTINCT ON (column1) column_alias,
   column2
FROM
   table_name
ORDER BY
   column1,
   column2;




# ---------------------WHERE-----------------

# "https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-where/"

# To select rows that satisfy a specified condition, you use a WHERE clause.

# ---> FROM -> WHERE -> SELECT -> ORDER BY
# Operators -> =, >, <, >=, <=, <> or !=, AND, OR, IN, BETWEEN, LIKE, IS NULL NOT


# ---> "="

SELECT
	column1,
	column2
FROM
	table_name
WHERE
	condition;



# ---> "AND"

SELECT
	column1,
	column2
FROM
	table_name
WHERE
	condition AND 
	condition;
	


# ---> "OR"

SELECT
	column1,
	column2
FROM
	table_name
WHERE
	condition OR 
	condition;
	
	
	
# ---> 'IN'
	
SELECT
	column1,
	column2
FROM
	table_name
WHERE
	expression IN (value1, value2,...);	
	
	
	
# ---> 'LIKE'

# some examples showing different LIKE operators with '%' and '_' wildcards:
# ---> "%" is a wild card which represents zero, one or multiple characters
# ---> "_" is a wild card which represents a single number or character. 

# Example ---> 
'A%' -> match any string that start with A, 
'%k' -> match any string that end with k
'_b%' -> match any string that second char is b
'%b_' -> match any string that second last char is b

SELECT
	column1,
	column2
FROM
	table_name
WHERE
	columnN LIKE pattern;
		
	


# ---> 'BETWEEN'

SELECT
	first_name,
	LENGTH(first_name) name_length
FROM
	customer
WHERE 
	first_name LIKE 'A%' AND
	LENGTH(first_name) BETWEEN 3 AND 5
ORDER BY
	name_length;



# ---> '<>' or '!='  both work same

SELECT 
	first_name, 
	last_name
FROM 
	customer 
WHERE 
	first_name LIKE 'Bra%' AND 
	last_name <> 'Motley';



# ---------------------LIMIT-----------------

# "https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-limit/"

# LIMIT is an optional clause of the SELECT statement that constrains the number of rows returned by the query.



SELECT select_list 
FROM table_name
ORDER BY sort_expression
LIMIT row_count
	
	

# ---------------------LIMIT and OFFSET-----------------

# you use OFFSET clause placed after the LIMIT clause

# The statement first skips row_to_skip rows before returning row_count rows generated by the query.


SELECT select_list
FROM table_name
ORDER BY sort_expression
LIMIT row_count OFFSET row_to_skip;



# ---------------------FETCH-----------------

# "https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-fetch/"

# the LIMIT clause is not a SQL-standard.

# Syntax

OFFSET start { ROW | ROWS }
FETCH { FIRST | NEXT } [ row_count ] { ROW | ROWS } ONLY

#  FETCH vs. LIMIT

# The FETCH clause is functionally equivalent to the LIMIT clause. If you plan to make your application compatible with other database systems, you should use the FETCH clause because it follows the standard SQL.



SELECT
    film_id,
    title
FROM
    film
ORDER BY
    title 
FETCH FIRST ROW ONLY;



SELECT
    film_id,
    title
FROM
    film
ORDER BY
    title 
FETCH FIRST 5 ROW ONLY;



# ---------------------FETCH and OFFSET-----------------


SELECT
    film_id,
    title
FROM
    film
ORDER BY
    title 
OFFSET 5 ROW
FETCH FIRST 11 ROW ONLY;




# ---------------------IN-----------------

# "https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-in/"

# You use IN operator in the WHERE clause to check if a value matches any value in a list of values.

value IN (value1,value2,...)

value IN (SELECT column_name FROM table_name);



SELECT customer_id,
	rental_id,
	return_date
FROM
	rental
WHERE
	customer_id IN (1, 2)
ORDER BY
	return_date DESC;




# ---------------------NOT IN-----------------

# You can combine the IN operator with the NOT operator to select rows whose values do not match the values in the list.



SELECT
	customer_id,
	rental_id,
	return_date
FROM
	rental
WHERE
	customer_id NOT IN (1, 2);



# ---------------------IN with a subquery-----------------

# The following query returns a list of customer ids from the rental table with the return date is 2005-05-27

# Because this query returns a list of values, you can use it as the input of the IN operator like this:

SELECT
	customer_id,
	first_name,
	last_name
FROM
	customer
WHERE
	customer_id IN (
		SELECT customer_id
		FROM rental
		WHERE CAST (return_date AS DATE) = '2005-05-27'
	)
ORDER BY customer_id;




# ---------------------BETWEEN-----------------

# "https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-between/"

# use the PostgreSQL BETWEEN operator to match a value against a range of values.

# Syntax

value NOT BETWEEN low AND high;
value >= low and value <= high
value NOT BETWEEN low AND high;
value < low OR value > high



SELECT
	customer_id,
	payment_id,
	amount
FROM
	payment
WHERE
	amount BETWEEN 8 AND 9;


SELECT
	customer_id,
	payment_id,
	amount,
 payment_date
FROM
	payment
WHERE
	payment_date BETWEEN '2007-02-07' AND '2007-02-15';




# ---------------------LIKE-----------------

# "https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-like/"

# LIKE in case-sensitive

SELECT
	'foo' LIKE 'foo', -- true
	'foo' LIKE 'f%', -- true
	'foo' LIKE '_o_', -- true
	'bar' LIKE 'b_', -- false
	'bar' LIKE '%r'; -- true




# ---------------------ILIKE-----------------

# ILIKE in case-insensitive


SELECT
	'foo' ILIKE 'FOO', -- true
	'foo' ILIKE 'F%', -- true
	'foo' ILIKE '_O_', -- true
	'bar' ILIKE 'B_', -- false
	'bar' ILIKE '%R'; -- true


Operator	Equivalent
~~		LIKE
~~*		ILIKE
!~~		NOT LIKE
!~~*		NOT ILIKE




# ---------------------NULL-----------------

# "https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-is-null/"

SELECT
    id,
    first_name,
    last_name,
    email,
    phone
FROM
    contacts
WHERE
    phone = NULL;


# The statement returns no row. This is because the expression phone = NULL in the WHERE clause always returns false.

# Even though there is a NULL in the phone column, the expression NULL = NULL returns false. This is because NULL is not equal to any value even itself.




# ---------------------IS NULL-----------------

# To check whether a value is NULL or not, you use the IS NULL operator instead:

SELECT
    id,
    first_name,
    last_name,
    email,
    phone
FROM
    contacts
WHERE
    phone IS NULL;




# ---------------------JOINS-----------------

# "https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-joins/"

# PostgreSQL join is used to combine columns from one (self-join) or more tables based on the values of the common columns between related tables. 
# The common columns are typically the primary key columns of the first table and foreign key columns of the second table.


# ---> INNER JOIN

# In PostgreSQL the INNER JOIN keyword selects all rows from both the tables as long as the condition satisfies. This keyword will create the result-set by combining all rows from both the tables where the condition satisfies i.e value of the common field will be the same.

SELECT
    a,
    fruit_a,
    b,
    fruit_b
FROM
    basket_a
INNER JOIN basket_b
    ON fruit_a = fruit_b;
    
# WORKING: A = [1,2,3,4,5], B = [2,5]
# OUTPUT: C = [2, 5]


# ---> LEFT JOIN

❗️
# Note that the LEFT JOIN is the same as the LEFT OUTER JOIN so you can use them interchangeably.
❗️

# If these values are equal, the left join creates a new row that contains columns of both tables and adds this new row to the result set. 

# In case the values do not equal, the left join also creates a new row that contains columns from both tables and adds it to the result set. However, it fills the columns of the right table (basket_b) with null.

SELECT
    a,
    fruit_a,
    b,
    fruit_b
FROM
    basket_a
LEFT JOIN basket_b 
   ON fruit_a = fruit_b;
   
# WORKING: A = [1,2,3,4,5], B = [2,5]
# OUTPUT: C = [1,2,3,4,5]


# ---> LEFT JOIN with WHERE

# To select rows from the left table that do not have matching rows in the right table, you use the left join with a WHERE clause. For example:

# the left join that returns rows from the left table that do not have matching rows from the right table: using where clause

SELECT
    a,
    fruit_a,
    b,
    fruit_b
FROM
    basket_a
LEFT JOIN basket_b 
    ON fruit_a = fruit_b
WHERE b IS NULL;

# WORKING: A = [1,2,3,4,5], B = [2,5,7]
# OUTPUT: C = [1,3,4]



# ---> RIGHT JOIN

❗️
# The RIGHT JOIN and RIGHT OUTER JOIN are the same therefore you can use them interchangeably.
❗️

# The right join is a reversed version of the left join.


SELECT
    a,
    fruit_a,
    b,
    fruit_b
FROM
    basket_a
RIGHT JOIN basket_b ON fruit_a = fruit_b;

# WORKING: A = [1,2,3,4,5], B = [2,5,7]
# OUTPUT: C = [2, 5, 7]


# ---> RIGHT JOIN with WHERE

SELECT
    a,
    fruit_a,
    b,
    fruit_b
FROM
    basket_a
RIGHT JOIN basket_b 
   ON fruit_a = fruit_b
WHERE a IS NULL;

# WORKING: A = [1,2,3,4,5], B = [2,5,7]
# OUTPUT: C = [7]



# ---> FULL JOIN 

❗️
# FULL OUTER JOIN and FULL JOIN are the same.
❗️

# The full outer join or full join returns a result set that contains all rows from both left and right tables, with the matching rows from both sides if available. In case there is no match, the columns of the table will be filled with NULL.


SELECT
    a,
    fruit_a,
    b,
    fruit_b
FROM
    basket_a
FULL OUTER JOIN basket_b 
    ON fruit_a = fruit_b;
    
# WORKING: A = [1,2,3,4,5], B = [2,5,7]
# OUTPUT: C = [1,2,3,4,5,7]


# ---> FULL JOIN with WHERE

SELECT
    a,
    fruit_a,
    b,
    fruit_b
FROM
    basket_a
FULL JOIN basket_b 
   ON fruit_a = fruit_b
WHERE a IS NULL OR b IS NULL;

# WORKING: A = [1,2,3,4,5], B = [2,5,7]
# OUTPUT: C = [1,3,4,7]



# ---------------------TABLE ALIASES-----------------

# https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-alias/

table_name AS alias_name;
# AS keyword is optional
table_name alias_name;

SELECT
    e.first_name employee,
    m .first_name manager
FROM
    employee e
INNER JOIN employee m 
    ON m.employee_id = e.manager_id
ORDER BY manager;




# ---------------------INNER JOIN-----------------

# "https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-inner-join/"

# Suppose that you have two tables A and B. The table A has a column pka whose value matches with values in the fka column of table B.

SELECT
	pka,
	c1,
	pkb,
	c2
FROM
	A
INNER JOIN B ON pka = fka;

# Most of the time, the tables that you want to join will have columns with the same name.

# If you reference columns with the same name from different tables in a query, you will get an error. To avoid the error, you need to qualify these columns fully using the following syntax:

table_name.column_name


# ---> INNER JOIN to join two tables

# Each customer may have zero or many payments. However, each payment belongs to one and only one customer. The customer_id column establishes the relationship between the two tables.

# The following statement uses the INNER JOIN clause to select data from both tables:

SELECT
	c.customer_id,
	first_name,
	last_name,
	amount,
	payment_date
FROM
	customer c
INNER JOIN payment p
    ON p.customer_id = c.customer_id;

# Since both tables have the same customer_id column, you can use the USING syntax:

SELECT
	c.customer_id,
	first_name,
	last_name,
	amount,
	payment_date
FROM
	customer c
INNER JOIN payment USING(customer_id);


# ---> INNER JOIN to join three tables

SELECT
	c.customer_id,
	c.first_name customer_first_name,
	c.last_name customer_last_name,
	s.first_name staff_first_name,
	s.last_name staff_last_name,
	amount,
	payment_date
FROM
	customer c
INNER JOIN payment p 
    ON p.customer_id = c.customer_id
INNER JOIN staff s 
    ON p.staff_id = s.staff_id;




# ---------------------LEFT JOIN-----------------

# "https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-left-join/"



# ---------------------RIGHT JOIN-----------------

# "https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-right-join/"



# ---------------------SELF JOIN-----------------

# Best Example is employee and manager

# "https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-self-join/"



# ---------------------FULL OUTER JOIN-----------------

# "https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-full-outer-join/"



# ---------------------CROSS JOIN-----------------

# "https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-cross-join/"

# PostgreSQL CROSS JOIN to produce a cartesian product of rows from the joined tables.

















































